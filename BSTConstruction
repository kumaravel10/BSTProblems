public class BST {
	public int value;
    public BST left;
    public BST right;

    public BST(int value) {
      this.value = value;
    }

    public BST insert(int value) {
			BST currentNode = this;
			while(true){
			  if(value < currentNode.value){
					 if(currentNode.left == null){
					 		currentNode.left = new BST(value);
							break;
					 }
					 currentNode = currentNode.left;
				} else if(value >= currentNode.value){
						if(currentNode.right == null){
							currentNode.right = new BST(value);
							break;
						}
						currentNode = currentNode.right;
				}
			}
      return this;
    }

    public boolean contains(int value) {
      BST currentNode = this;
			
			while(currentNode != null){
				if(value == currentNode.value){
				   return true;
				} else if(value < currentNode.value){
							currentNode = currentNode.left;
				} else if(value > currentNode.value){
							currentNode = currentNode.right;
				}
			}
      return false;
    }

    public BST remove(int value) {
     BST currentNode = this;
		 BST parentNode = null;
		 
		 while(currentNode != null){
		 if(value < currentNode.value){
		    parentNode = currentNode;
				currentNode = currentNode.left;
		 } else if(value > currentNode.value){
		 		parentNode = currentNode;
				currentNode = currentNode.right;
		 } else{
		 				if(currentNode.left != null && currentNode.right !=null){
		 				if(currentNode.right.left != null) {
		 					BST leastPNode = getNodeWithMinValue(currentNode.right.left);
		 					currentNode.value = leastPNode.left.value;
		 					leastPNode.left = leastPNode.left.right != null ? leastPNode.left.right : null;
		 				} else {
		 					currentNode.value = currentNode.right.value;
		 					if(currentNode.right.right != null) {
		 						currentNode.right = currentNode.right.right;
		 					} else {
		 						currentNode.right =  null;
		 					}
		 				}
						
						} else if(parentNode == null){
							if(currentNode.left != null){
								 currentNode.value = currentNode.left.value;
								 currentNode.right = currentNode.left.right;
								 currentNode.left = currentNode.left.left;
							}else if(currentNode.right != null){
								 currentNode.value = currentNode.right.value;
								 currentNode.left = currentNode.right.left;
								 currentNode.right = currentNode.right.right;
							} else{
							    // This is a single-node tree do nothing
							}
						} else if(parentNode.left == currentNode){
							parentNode.left = currentNode.left != null ? currentNode.left : currentNode.right;
							} else if(parentNode.right == currentNode){
							parentNode.right = currentNode.left != null ? currentNode.left : currentNode.right;
							}
							break;
						}
		 }
		 return this;
		 }
		
		private BST getNodeWithMinValue(BST cLeft){
			BST leastPNode =  cLeft;
			while(cLeft != null) {
				if(cLeft.left != null) {
					leastPNode = cLeft;
					cLeft = cLeft.left;
				}
				break;
				
			}
			return leastPNode;
		 }
		
		public static void main (String[] args) {
			//BST bst = new BST(10).insert(15).insert(22).insert(13).insert(14).insert(12).insert(5).insert(5).insert(2).insert(1);
			//BST bst = new BST(10).insert(15).insert(22).insert(13).insert(14).insert(12).insert(5).insert(7).insert(6).insert(2).insert(1);
			BST bst = new BST(10).insert(15).insert(22).insert(13).insert(14).insert(12).insert(5).insert(5).insert(2).insert(1);
			BST rBst = bst.remove(10);
			
		}

}
